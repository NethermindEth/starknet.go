// Code generated by MockGen. DO NOT EDIT.
// Source: types_paymaster.go
//
// Generated by this command:
//
//	mockgen -destination=../mocks/mock_paymaster_provider.go -package=mocks -source=types_paymaster.go PaymasterProvider
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	felt "github.com/NethermindEth/juno/core/felt"
	rpc "github.com/NethermindEth/starknet.go/rpc"
	gomock "go.uber.org/mock/gomock"
)

// MockPaymasterProvider is a mock of PaymasterProvider interface.
type MockPaymasterProvider struct {
	ctrl     *gomock.Controller
	recorder *MockPaymasterProviderMockRecorder
	isgomock struct{}
}

// MockPaymasterProviderMockRecorder is the mock recorder for MockPaymasterProvider.
type MockPaymasterProviderMockRecorder struct {
	mock *MockPaymasterProvider
}

// NewMockPaymasterProvider creates a new mock instance.
func NewMockPaymasterProvider(ctrl *gomock.Controller) *MockPaymasterProvider {
	mock := &MockPaymasterProvider{ctrl: ctrl}
	mock.recorder = &MockPaymasterProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymasterProvider) EXPECT() *MockPaymasterProviderMockRecorder {
	return m.recorder
}

// BuildTransaction mocks base method.
func (m *MockPaymasterProvider) BuildTransaction(ctx context.Context, request rpc.BuildTransactionRequest) (*rpc.BuildTransactionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildTransaction", ctx, request)
	ret0, _ := ret[0].(*rpc.BuildTransactionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildTransaction indicates an expected call of BuildTransaction.
func (mr *MockPaymasterProviderMockRecorder) BuildTransaction(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildTransaction", reflect.TypeOf((*MockPaymasterProvider)(nil).BuildTransaction), ctx, request)
}

// ExecuteTransaction mocks base method.
func (m *MockPaymasterProvider) ExecuteTransaction(ctx context.Context, request rpc.ExecuteTransactionRequest) (*rpc.ExecuteTransactionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteTransaction", ctx, request)
	ret0, _ := ret[0].(*rpc.ExecuteTransactionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteTransaction indicates an expected call of ExecuteTransaction.
func (mr *MockPaymasterProviderMockRecorder) ExecuteTransaction(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteTransaction", reflect.TypeOf((*MockPaymasterProvider)(nil).ExecuteTransaction), ctx, request)
}

// GetSupportedTokens mocks base method.
func (m *MockPaymasterProvider) GetSupportedTokens(ctx context.Context) ([]rpc.TokenData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupportedTokens", ctx)
	ret0, _ := ret[0].([]rpc.TokenData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSupportedTokens indicates an expected call of GetSupportedTokens.
func (mr *MockPaymasterProviderMockRecorder) GetSupportedTokens(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupportedTokens", reflect.TypeOf((*MockPaymasterProvider)(nil).GetSupportedTokens), ctx)
}

// IsAvailable mocks base method.
func (m *MockPaymasterProvider) IsAvailable(ctx context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAvailable", ctx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAvailable indicates an expected call of IsAvailable.
func (mr *MockPaymasterProviderMockRecorder) IsAvailable(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAvailable", reflect.TypeOf((*MockPaymasterProvider)(nil).IsAvailable), ctx)
}

// TrackingIdToLatestHash mocks base method.
func (m *MockPaymasterProvider) TrackingIdToLatestHash(ctx context.Context, trackingId *felt.Felt) (*rpc.TrackingIdResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrackingIdToLatestHash", ctx, trackingId)
	ret0, _ := ret[0].(*rpc.TrackingIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TrackingIdToLatestHash indicates an expected call of TrackingIdToLatestHash.
func (mr *MockPaymasterProviderMockRecorder) TrackingIdToLatestHash(ctx, trackingId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrackingIdToLatestHash", reflect.TypeOf((*MockPaymasterProvider)(nil).TrackingIdToLatestHash), ctx, trackingId)
}
