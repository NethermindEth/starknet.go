// Code generated by MockGen. DO NOT EDIT.
// Source: provider.go
//
// Generated by this command:
//
//	mockgen -destination=../mocks/mock_rpc_provider.go -package=mocks -source=provider.go api
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	felt "github.com/NethermindEth/juno/core/felt"
	client "github.com/NethermindEth/starknet.go/client"
	contracts "github.com/NethermindEth/starknet.go/contracts"
	rpc "github.com/NethermindEth/starknet.go/rpc"
	gomock "go.uber.org/mock/gomock"
)

// MockRPCProvider is a mock of RPCProvider interface.
type MockRPCProvider struct {
	ctrl     *gomock.Controller
	recorder *MockRPCProviderMockRecorder
	isgomock struct{}
}

// MockRPCProviderMockRecorder is the mock recorder for MockRPCProvider.
type MockRPCProviderMockRecorder struct {
	mock *MockRPCProvider
}

// NewMockRPCProvider creates a new mock instance.
func NewMockRPCProvider(ctrl *gomock.Controller) *MockRPCProvider {
	mock := &MockRPCProvider{ctrl: ctrl}
	mock.recorder = &MockRPCProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRPCProvider) EXPECT() *MockRPCProviderMockRecorder {
	return m.recorder
}

// AddDeclareTransaction mocks base method.
func (m *MockRPCProvider) AddDeclareTransaction(ctx context.Context, declareTransaction *rpc.BroadcastDeclareTxnV3) (rpc.AddDeclareTransactionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDeclareTransaction", ctx, declareTransaction)
	ret0, _ := ret[0].(rpc.AddDeclareTransactionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddDeclareTransaction indicates an expected call of AddDeclareTransaction.
func (mr *MockRPCProviderMockRecorder) AddDeclareTransaction(ctx, declareTransaction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDeclareTransaction", reflect.TypeOf((*MockRPCProvider)(nil).AddDeclareTransaction), ctx, declareTransaction)
}

// AddDeployAccountTransaction mocks base method.
func (m *MockRPCProvider) AddDeployAccountTransaction(ctx context.Context, deployAccountTransaction *rpc.BroadcastDeployAccountTxnV3) (rpc.AddDeployAccountTransactionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDeployAccountTransaction", ctx, deployAccountTransaction)
	ret0, _ := ret[0].(rpc.AddDeployAccountTransactionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddDeployAccountTransaction indicates an expected call of AddDeployAccountTransaction.
func (mr *MockRPCProviderMockRecorder) AddDeployAccountTransaction(ctx, deployAccountTransaction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDeployAccountTransaction", reflect.TypeOf((*MockRPCProvider)(nil).AddDeployAccountTransaction), ctx, deployAccountTransaction)
}

// AddInvokeTransaction mocks base method.
func (m *MockRPCProvider) AddInvokeTransaction(ctx context.Context, invokeTxn *rpc.BroadcastInvokeTxnV3) (rpc.AddInvokeTransactionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddInvokeTransaction", ctx, invokeTxn)
	ret0, _ := ret[0].(rpc.AddInvokeTransactionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddInvokeTransaction indicates an expected call of AddInvokeTransaction.
func (mr *MockRPCProviderMockRecorder) AddInvokeTransaction(ctx, invokeTxn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddInvokeTransaction", reflect.TypeOf((*MockRPCProvider)(nil).AddInvokeTransaction), ctx, invokeTxn)
}

// BlockHashAndNumber mocks base method.
func (m *MockRPCProvider) BlockHashAndNumber(ctx context.Context) (*rpc.BlockHashAndNumberOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockHashAndNumber", ctx)
	ret0, _ := ret[0].(*rpc.BlockHashAndNumberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockHashAndNumber indicates an expected call of BlockHashAndNumber.
func (mr *MockRPCProviderMockRecorder) BlockHashAndNumber(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockHashAndNumber", reflect.TypeOf((*MockRPCProvider)(nil).BlockHashAndNumber), ctx)
}

// BlockNumber mocks base method.
func (m *MockRPCProvider) BlockNumber(ctx context.Context) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockNumber", ctx)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockNumber indicates an expected call of BlockNumber.
func (mr *MockRPCProviderMockRecorder) BlockNumber(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockNumber", reflect.TypeOf((*MockRPCProvider)(nil).BlockNumber), ctx)
}

// BlockTransactionCount mocks base method.
func (m *MockRPCProvider) BlockTransactionCount(ctx context.Context, blockID rpc.BlockID) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockTransactionCount", ctx, blockID)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockTransactionCount indicates an expected call of BlockTransactionCount.
func (mr *MockRPCProviderMockRecorder) BlockTransactionCount(ctx, blockID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockTransactionCount", reflect.TypeOf((*MockRPCProvider)(nil).BlockTransactionCount), ctx, blockID)
}

// BlockWithReceipts mocks base method.
func (m *MockRPCProvider) BlockWithReceipts(ctx context.Context, blockID rpc.BlockID) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockWithReceipts", ctx, blockID)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockWithReceipts indicates an expected call of BlockWithReceipts.
func (mr *MockRPCProviderMockRecorder) BlockWithReceipts(ctx, blockID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockWithReceipts", reflect.TypeOf((*MockRPCProvider)(nil).BlockWithReceipts), ctx, blockID)
}

// BlockWithTxHashes mocks base method.
func (m *MockRPCProvider) BlockWithTxHashes(ctx context.Context, blockID rpc.BlockID) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockWithTxHashes", ctx, blockID)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockWithTxHashes indicates an expected call of BlockWithTxHashes.
func (mr *MockRPCProviderMockRecorder) BlockWithTxHashes(ctx, blockID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockWithTxHashes", reflect.TypeOf((*MockRPCProvider)(nil).BlockWithTxHashes), ctx, blockID)
}

// BlockWithTxs mocks base method.
func (m *MockRPCProvider) BlockWithTxs(ctx context.Context, blockID rpc.BlockID) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockWithTxs", ctx, blockID)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockWithTxs indicates an expected call of BlockWithTxs.
func (mr *MockRPCProviderMockRecorder) BlockWithTxs(ctx, blockID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockWithTxs", reflect.TypeOf((*MockRPCProvider)(nil).BlockWithTxs), ctx, blockID)
}

// Call mocks base method.
func (m *MockRPCProvider) Call(ctx context.Context, call rpc.FunctionCall, block rpc.BlockID) ([]*felt.Felt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Call", ctx, call, block)
	ret0, _ := ret[0].([]*felt.Felt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Call indicates an expected call of Call.
func (mr *MockRPCProviderMockRecorder) Call(ctx, call, block any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockRPCProvider)(nil).Call), ctx, call, block)
}

// ChainID mocks base method.
func (m *MockRPCProvider) ChainID(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChainID", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChainID indicates an expected call of ChainID.
func (mr *MockRPCProviderMockRecorder) ChainID(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChainID", reflect.TypeOf((*MockRPCProvider)(nil).ChainID), ctx)
}

// Class mocks base method.
func (m *MockRPCProvider) Class(ctx context.Context, blockID rpc.BlockID, classHash *felt.Felt) (rpc.ClassOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Class", ctx, blockID, classHash)
	ret0, _ := ret[0].(rpc.ClassOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Class indicates an expected call of Class.
func (mr *MockRPCProviderMockRecorder) Class(ctx, blockID, classHash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Class", reflect.TypeOf((*MockRPCProvider)(nil).Class), ctx, blockID, classHash)
}

// ClassAt mocks base method.
func (m *MockRPCProvider) ClassAt(ctx context.Context, blockID rpc.BlockID, contractAddress *felt.Felt) (rpc.ClassOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClassAt", ctx, blockID, contractAddress)
	ret0, _ := ret[0].(rpc.ClassOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClassAt indicates an expected call of ClassAt.
func (mr *MockRPCProviderMockRecorder) ClassAt(ctx, blockID, contractAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClassAt", reflect.TypeOf((*MockRPCProvider)(nil).ClassAt), ctx, blockID, contractAddress)
}

// ClassHashAt mocks base method.
func (m *MockRPCProvider) ClassHashAt(ctx context.Context, blockID rpc.BlockID, contractAddress *felt.Felt) (*felt.Felt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClassHashAt", ctx, blockID, contractAddress)
	ret0, _ := ret[0].(*felt.Felt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClassHashAt indicates an expected call of ClassHashAt.
func (mr *MockRPCProviderMockRecorder) ClassHashAt(ctx, blockID, contractAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClassHashAt", reflect.TypeOf((*MockRPCProvider)(nil).ClassHashAt), ctx, blockID, contractAddress)
}

// CompiledCasm mocks base method.
func (m *MockRPCProvider) CompiledCasm(ctx context.Context, classHash *felt.Felt) (*contracts.CasmClass, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompiledCasm", ctx, classHash)
	ret0, _ := ret[0].(*contracts.CasmClass)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompiledCasm indicates an expected call of CompiledCasm.
func (mr *MockRPCProviderMockRecorder) CompiledCasm(ctx, classHash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompiledCasm", reflect.TypeOf((*MockRPCProvider)(nil).CompiledCasm), ctx, classHash)
}

// EstimateFee mocks base method.
func (m *MockRPCProvider) EstimateFee(ctx context.Context, requests []rpc.BroadcastTxn, simulationFlags []rpc.SimulationFlag, blockID rpc.BlockID) ([]rpc.FeeEstimation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EstimateFee", ctx, requests, simulationFlags, blockID)
	ret0, _ := ret[0].([]rpc.FeeEstimation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EstimateFee indicates an expected call of EstimateFee.
func (mr *MockRPCProviderMockRecorder) EstimateFee(ctx, requests, simulationFlags, blockID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstimateFee", reflect.TypeOf((*MockRPCProvider)(nil).EstimateFee), ctx, requests, simulationFlags, blockID)
}

// EstimateMessageFee mocks base method.
func (m *MockRPCProvider) EstimateMessageFee(ctx context.Context, msg rpc.MsgFromL1, blockID rpc.BlockID) (rpc.MessageFeeEstimation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EstimateMessageFee", ctx, msg, blockID)
	ret0, _ := ret[0].(rpc.MessageFeeEstimation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EstimateMessageFee indicates an expected call of EstimateMessageFee.
func (mr *MockRPCProviderMockRecorder) EstimateMessageFee(ctx, msg, blockID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstimateMessageFee", reflect.TypeOf((*MockRPCProvider)(nil).EstimateMessageFee), ctx, msg, blockID)
}

// Events mocks base method.
func (m *MockRPCProvider) Events(ctx context.Context, input rpc.EventsInput) (*rpc.EventChunk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Events", ctx, input)
	ret0, _ := ret[0].(*rpc.EventChunk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Events indicates an expected call of Events.
func (mr *MockRPCProviderMockRecorder) Events(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Events", reflect.TypeOf((*MockRPCProvider)(nil).Events), ctx, input)
}

// MessagesStatus mocks base method.
func (m *MockRPCProvider) MessagesStatus(ctx context.Context, transactionHash rpc.NumAsHex) ([]rpc.MessageStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessagesStatus", ctx, transactionHash)
	ret0, _ := ret[0].([]rpc.MessageStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MessagesStatus indicates an expected call of MessagesStatus.
func (mr *MockRPCProviderMockRecorder) MessagesStatus(ctx, transactionHash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessagesStatus", reflect.TypeOf((*MockRPCProvider)(nil).MessagesStatus), ctx, transactionHash)
}

// Nonce mocks base method.
func (m *MockRPCProvider) Nonce(ctx context.Context, blockID rpc.BlockID, contractAddress *felt.Felt) (*felt.Felt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Nonce", ctx, blockID, contractAddress)
	ret0, _ := ret[0].(*felt.Felt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Nonce indicates an expected call of Nonce.
func (mr *MockRPCProviderMockRecorder) Nonce(ctx, blockID, contractAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Nonce", reflect.TypeOf((*MockRPCProvider)(nil).Nonce), ctx, blockID, contractAddress)
}

// SimulateTransactions mocks base method.
func (m *MockRPCProvider) SimulateTransactions(ctx context.Context, blockID rpc.BlockID, txns []rpc.BroadcastTxn, simulationFlags []rpc.SimulationFlag) ([]rpc.SimulatedTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SimulateTransactions", ctx, blockID, txns, simulationFlags)
	ret0, _ := ret[0].([]rpc.SimulatedTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SimulateTransactions indicates an expected call of SimulateTransactions.
func (mr *MockRPCProviderMockRecorder) SimulateTransactions(ctx, blockID, txns, simulationFlags any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SimulateTransactions", reflect.TypeOf((*MockRPCProvider)(nil).SimulateTransactions), ctx, blockID, txns, simulationFlags)
}

// SpecVersion mocks base method.
func (m *MockRPCProvider) SpecVersion(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SpecVersion", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SpecVersion indicates an expected call of SpecVersion.
func (mr *MockRPCProviderMockRecorder) SpecVersion(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SpecVersion", reflect.TypeOf((*MockRPCProvider)(nil).SpecVersion), ctx)
}

// StateUpdate mocks base method.
func (m *MockRPCProvider) StateUpdate(ctx context.Context, blockID rpc.BlockID) (*rpc.StateUpdateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StateUpdate", ctx, blockID)
	ret0, _ := ret[0].(*rpc.StateUpdateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StateUpdate indicates an expected call of StateUpdate.
func (mr *MockRPCProviderMockRecorder) StateUpdate(ctx, blockID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StateUpdate", reflect.TypeOf((*MockRPCProvider)(nil).StateUpdate), ctx, blockID)
}

// StorageAt mocks base method.
func (m *MockRPCProvider) StorageAt(ctx context.Context, contractAddress *felt.Felt, key string, blockID rpc.BlockID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageAt", ctx, contractAddress, key, blockID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StorageAt indicates an expected call of StorageAt.
func (mr *MockRPCProviderMockRecorder) StorageAt(ctx, contractAddress, key, blockID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageAt", reflect.TypeOf((*MockRPCProvider)(nil).StorageAt), ctx, contractAddress, key, blockID)
}

// StorageProof mocks base method.
func (m *MockRPCProvider) StorageProof(ctx context.Context, storageProofInput rpc.StorageProofInput) (*rpc.StorageProofResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageProof", ctx, storageProofInput)
	ret0, _ := ret[0].(*rpc.StorageProofResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StorageProof indicates an expected call of StorageProof.
func (mr *MockRPCProviderMockRecorder) StorageProof(ctx, storageProofInput any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageProof", reflect.TypeOf((*MockRPCProvider)(nil).StorageProof), ctx, storageProofInput)
}

// Syncing mocks base method.
func (m *MockRPCProvider) Syncing(ctx context.Context) (rpc.SyncStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Syncing", ctx)
	ret0, _ := ret[0].(rpc.SyncStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Syncing indicates an expected call of Syncing.
func (mr *MockRPCProviderMockRecorder) Syncing(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Syncing", reflect.TypeOf((*MockRPCProvider)(nil).Syncing), ctx)
}

// TraceBlockTransactions mocks base method.
func (m *MockRPCProvider) TraceBlockTransactions(ctx context.Context, blockID rpc.BlockID) ([]rpc.Trace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TraceBlockTransactions", ctx, blockID)
	ret0, _ := ret[0].([]rpc.Trace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TraceBlockTransactions indicates an expected call of TraceBlockTransactions.
func (mr *MockRPCProviderMockRecorder) TraceBlockTransactions(ctx, blockID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TraceBlockTransactions", reflect.TypeOf((*MockRPCProvider)(nil).TraceBlockTransactions), ctx, blockID)
}

// TraceTransaction mocks base method.
func (m *MockRPCProvider) TraceTransaction(ctx context.Context, transactionHash *felt.Felt) (rpc.TxnTrace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TraceTransaction", ctx, transactionHash)
	ret0, _ := ret[0].(rpc.TxnTrace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TraceTransaction indicates an expected call of TraceTransaction.
func (mr *MockRPCProviderMockRecorder) TraceTransaction(ctx, transactionHash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TraceTransaction", reflect.TypeOf((*MockRPCProvider)(nil).TraceTransaction), ctx, transactionHash)
}

// TransactionByBlockIDAndIndex mocks base method.
func (m *MockRPCProvider) TransactionByBlockIDAndIndex(ctx context.Context, blockID rpc.BlockID, index uint64) (*rpc.BlockTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransactionByBlockIDAndIndex", ctx, blockID, index)
	ret0, _ := ret[0].(*rpc.BlockTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransactionByBlockIDAndIndex indicates an expected call of TransactionByBlockIDAndIndex.
func (mr *MockRPCProviderMockRecorder) TransactionByBlockIDAndIndex(ctx, blockID, index any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransactionByBlockIDAndIndex", reflect.TypeOf((*MockRPCProvider)(nil).TransactionByBlockIDAndIndex), ctx, blockID, index)
}

// TransactionByHash mocks base method.
func (m *MockRPCProvider) TransactionByHash(ctx context.Context, hash *felt.Felt) (*rpc.BlockTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransactionByHash", ctx, hash)
	ret0, _ := ret[0].(*rpc.BlockTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransactionByHash indicates an expected call of TransactionByHash.
func (mr *MockRPCProviderMockRecorder) TransactionByHash(ctx, hash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransactionByHash", reflect.TypeOf((*MockRPCProvider)(nil).TransactionByHash), ctx, hash)
}

// TransactionReceipt mocks base method.
func (m *MockRPCProvider) TransactionReceipt(ctx context.Context, transactionHash *felt.Felt) (*rpc.TransactionReceiptWithBlockInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransactionReceipt", ctx, transactionHash)
	ret0, _ := ret[0].(*rpc.TransactionReceiptWithBlockInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransactionReceipt indicates an expected call of TransactionReceipt.
func (mr *MockRPCProviderMockRecorder) TransactionReceipt(ctx, transactionHash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransactionReceipt", reflect.TypeOf((*MockRPCProvider)(nil).TransactionReceipt), ctx, transactionHash)
}

// TransactionStatus mocks base method.
func (m *MockRPCProvider) TransactionStatus(ctx context.Context, transactionHash *felt.Felt) (*rpc.TxnStatusResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransactionStatus", ctx, transactionHash)
	ret0, _ := ret[0].(*rpc.TxnStatusResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransactionStatus indicates an expected call of TransactionStatus.
func (mr *MockRPCProviderMockRecorder) TransactionStatus(ctx, transactionHash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransactionStatus", reflect.TypeOf((*MockRPCProvider)(nil).TransactionStatus), ctx, transactionHash)
}

// MockWebsocketProvider is a mock of WebsocketProvider interface.
type MockWebsocketProvider struct {
	ctrl     *gomock.Controller
	recorder *MockWebsocketProviderMockRecorder
	isgomock struct{}
}

// MockWebsocketProviderMockRecorder is the mock recorder for MockWebsocketProvider.
type MockWebsocketProviderMockRecorder struct {
	mock *MockWebsocketProvider
}

// NewMockWebsocketProvider creates a new mock instance.
func NewMockWebsocketProvider(ctrl *gomock.Controller) *MockWebsocketProvider {
	mock := &MockWebsocketProvider{ctrl: ctrl}
	mock.recorder = &MockWebsocketProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebsocketProvider) EXPECT() *MockWebsocketProviderMockRecorder {
	return m.recorder
}

// SubscribeEvents mocks base method.
func (m *MockWebsocketProvider) SubscribeEvents(ctx context.Context, events chan<- *rpc.EmittedEventWithFinalityStatus, options *rpc.EventSubscriptionInput) (*client.ClientSubscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeEvents", ctx, events, options)
	ret0, _ := ret[0].(*client.ClientSubscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeEvents indicates an expected call of SubscribeEvents.
func (mr *MockWebsocketProviderMockRecorder) SubscribeEvents(ctx, events, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeEvents", reflect.TypeOf((*MockWebsocketProvider)(nil).SubscribeEvents), ctx, events, options)
}

// SubscribeNewHeads mocks base method.
func (m *MockWebsocketProvider) SubscribeNewHeads(ctx context.Context, headers chan<- *rpc.BlockHeader, subBlockID rpc.SubscriptionBlockID) (*client.ClientSubscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeNewHeads", ctx, headers, subBlockID)
	ret0, _ := ret[0].(*client.ClientSubscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeNewHeads indicates an expected call of SubscribeNewHeads.
func (mr *MockWebsocketProviderMockRecorder) SubscribeNewHeads(ctx, headers, subBlockID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeNewHeads", reflect.TypeOf((*MockWebsocketProvider)(nil).SubscribeNewHeads), ctx, headers, subBlockID)
}

// SubscribeNewTransactionReceipts mocks base method.
func (m *MockWebsocketProvider) SubscribeNewTransactionReceipts(ctx context.Context, txnReceipts chan<- *rpc.TransactionReceiptWithBlockInfo, options *rpc.SubNewTxnReceiptsInput) (*client.ClientSubscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeNewTransactionReceipts", ctx, txnReceipts, options)
	ret0, _ := ret[0].(*client.ClientSubscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeNewTransactionReceipts indicates an expected call of SubscribeNewTransactionReceipts.
func (mr *MockWebsocketProviderMockRecorder) SubscribeNewTransactionReceipts(ctx, txnReceipts, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeNewTransactionReceipts", reflect.TypeOf((*MockWebsocketProvider)(nil).SubscribeNewTransactionReceipts), ctx, txnReceipts, options)
}

// SubscribeNewTransactions mocks base method.
func (m *MockWebsocketProvider) SubscribeNewTransactions(ctx context.Context, newTxns chan<- *rpc.TxnWithHashAndStatus, options *rpc.SubNewTxnsInput) (*client.ClientSubscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeNewTransactions", ctx, newTxns, options)
	ret0, _ := ret[0].(*client.ClientSubscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeNewTransactions indicates an expected call of SubscribeNewTransactions.
func (mr *MockWebsocketProviderMockRecorder) SubscribeNewTransactions(ctx, newTxns, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeNewTransactions", reflect.TypeOf((*MockWebsocketProvider)(nil).SubscribeNewTransactions), ctx, newTxns, options)
}

// SubscribeTransactionStatus mocks base method.
func (m *MockWebsocketProvider) SubscribeTransactionStatus(ctx context.Context, newStatus chan<- *rpc.NewTxnStatus, transactionHash *felt.Felt) (*client.ClientSubscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeTransactionStatus", ctx, newStatus, transactionHash)
	ret0, _ := ret[0].(*client.ClientSubscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeTransactionStatus indicates an expected call of SubscribeTransactionStatus.
func (mr *MockWebsocketProviderMockRecorder) SubscribeTransactionStatus(ctx, newStatus, transactionHash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeTransactionStatus", reflect.TypeOf((*MockWebsocketProvider)(nil).SubscribeTransactionStatus), ctx, newStatus, transactionHash)
}
