// Code generated by MockGen. DO NOT EDIT.
// Source: account.go
//
// Generated by this command:
//
//	mockgen -destination=../mocks/mock_account.go -package=mocks -source=account.go AccountInterface
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	felt "github.com/NethermindEth/juno/core/felt"
	contracts "github.com/NethermindEth/starknet.go/contracts"
	rpc "github.com/NethermindEth/starknet.go/rpc"
	gomock "go.uber.org/mock/gomock"
)

// MockAccountInterface is a mock of AccountInterface interface.
type MockAccountInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAccountInterfaceMockRecorder
	isgomock struct{}
}

// MockAccountInterfaceMockRecorder is the mock recorder for MockAccountInterface.
type MockAccountInterfaceMockRecorder struct {
	mock *MockAccountInterface
}

// NewMockAccountInterface creates a new mock instance.
func NewMockAccountInterface(ctrl *gomock.Controller) *MockAccountInterface {
	mock := &MockAccountInterface{ctrl: ctrl}
	mock.recorder = &MockAccountInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountInterface) EXPECT() *MockAccountInterfaceMockRecorder {
	return m.recorder
}

// BuildAndEstimateDeployAccountTxn mocks base method.
func (m *MockAccountInterface) BuildAndEstimateDeployAccountTxn(ctx context.Context, salt, classHash *felt.Felt, constructorCalldata []*felt.Felt, multiplier float64) (*rpc.BroadcastDeployAccountTxnV3, *felt.Felt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildAndEstimateDeployAccountTxn", ctx, salt, classHash, constructorCalldata, multiplier)
	ret0, _ := ret[0].(*rpc.BroadcastDeployAccountTxnV3)
	ret1, _ := ret[1].(*felt.Felt)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// BuildAndEstimateDeployAccountTxn indicates an expected call of BuildAndEstimateDeployAccountTxn.
func (mr *MockAccountInterfaceMockRecorder) BuildAndEstimateDeployAccountTxn(ctx, salt, classHash, constructorCalldata, multiplier any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildAndEstimateDeployAccountTxn", reflect.TypeOf((*MockAccountInterface)(nil).BuildAndEstimateDeployAccountTxn), ctx, salt, classHash, constructorCalldata, multiplier)
}

// BuildAndSendDeclareTxn mocks base method.
func (m *MockAccountInterface) BuildAndSendDeclareTxn(ctx context.Context, casmClass *contracts.CasmClass, contractClass *contracts.ContractClass, multiplier float64) (*rpc.AddDeclareTransactionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildAndSendDeclareTxn", ctx, casmClass, contractClass, multiplier)
	ret0, _ := ret[0].(*rpc.AddDeclareTransactionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildAndSendDeclareTxn indicates an expected call of BuildAndSendDeclareTxn.
func (mr *MockAccountInterfaceMockRecorder) BuildAndSendDeclareTxn(ctx, casmClass, contractClass, multiplier any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildAndSendDeclareTxn", reflect.TypeOf((*MockAccountInterface)(nil).BuildAndSendDeclareTxn), ctx, casmClass, contractClass, multiplier)
}

// BuildAndSendInvokeTxn mocks base method.
func (m *MockAccountInterface) BuildAndSendInvokeTxn(ctx context.Context, functionCalls []rpc.InvokeFunctionCall, multiplier float64) (*rpc.AddInvokeTransactionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildAndSendInvokeTxn", ctx, functionCalls, multiplier)
	ret0, _ := ret[0].(*rpc.AddInvokeTransactionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildAndSendInvokeTxn indicates an expected call of BuildAndSendInvokeTxn.
func (mr *MockAccountInterfaceMockRecorder) BuildAndSendInvokeTxn(ctx, functionCalls, multiplier any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildAndSendInvokeTxn", reflect.TypeOf((*MockAccountInterface)(nil).BuildAndSendInvokeTxn), ctx, functionCalls, multiplier)
}

// Nonce mocks base method.
func (m *MockAccountInterface) Nonce(ctx context.Context) (*felt.Felt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Nonce", ctx)
	ret0, _ := ret[0].(*felt.Felt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Nonce indicates an expected call of Nonce.
func (mr *MockAccountInterfaceMockRecorder) Nonce(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Nonce", reflect.TypeOf((*MockAccountInterface)(nil).Nonce), ctx)
}

// SendTransaction mocks base method.
func (m *MockAccountInterface) SendTransaction(ctx context.Context, txn rpc.BroadcastTxn) (*rpc.TransactionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendTransaction", ctx, txn)
	ret0, _ := ret[0].(*rpc.TransactionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendTransaction indicates an expected call of SendTransaction.
func (mr *MockAccountInterfaceMockRecorder) SendTransaction(ctx, txn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTransaction", reflect.TypeOf((*MockAccountInterface)(nil).SendTransaction), ctx, txn)
}

// Sign mocks base method.
func (m *MockAccountInterface) Sign(ctx context.Context, msg *felt.Felt) ([]*felt.Felt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sign", ctx, msg)
	ret0, _ := ret[0].([]*felt.Felt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sign indicates an expected call of Sign.
func (mr *MockAccountInterfaceMockRecorder) Sign(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*MockAccountInterface)(nil).Sign), ctx, msg)
}

// SignDeclareTransaction mocks base method.
func (m *MockAccountInterface) SignDeclareTransaction(ctx context.Context, tx rpc.DeclareTxnType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignDeclareTransaction", ctx, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// SignDeclareTransaction indicates an expected call of SignDeclareTransaction.
func (mr *MockAccountInterfaceMockRecorder) SignDeclareTransaction(ctx, tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignDeclareTransaction", reflect.TypeOf((*MockAccountInterface)(nil).SignDeclareTransaction), ctx, tx)
}

// SignDeployAccountTransaction mocks base method.
func (m *MockAccountInterface) SignDeployAccountTransaction(ctx context.Context, tx rpc.DeployAccountType, precomputeAddress *felt.Felt) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignDeployAccountTransaction", ctx, tx, precomputeAddress)
	ret0, _ := ret[0].(error)
	return ret0
}

// SignDeployAccountTransaction indicates an expected call of SignDeployAccountTransaction.
func (mr *MockAccountInterfaceMockRecorder) SignDeployAccountTransaction(ctx, tx, precomputeAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignDeployAccountTransaction", reflect.TypeOf((*MockAccountInterface)(nil).SignDeployAccountTransaction), ctx, tx, precomputeAddress)
}

// SignInvokeTransaction mocks base method.
func (m *MockAccountInterface) SignInvokeTransaction(ctx context.Context, tx rpc.InvokeTxnType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignInvokeTransaction", ctx, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// SignInvokeTransaction indicates an expected call of SignInvokeTransaction.
func (mr *MockAccountInterfaceMockRecorder) SignInvokeTransaction(ctx, tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignInvokeTransaction", reflect.TypeOf((*MockAccountInterface)(nil).SignInvokeTransaction), ctx, tx)
}

func (m *MockAccountInterface) HashDeclare(tx rpc.DeclareTxnType) (*felt.Felt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashDeclare", tx)
	ret0, _ := ret[0].(*felt.Felt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (mr *MockAccountInterfaceMockRecorder) HashDeclare(tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashDeclare", reflect.TypeOf((*MockAccountInterface)(nil).HashDeclare), tx)
}

func (m *MockAccountInterface) HashDeployAccount(tx rpc.DeployAccountType, contract *felt.Felt) (*felt.Felt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashDeployAccount", tx, contract)
	ret0, _ := ret[0].(*felt.Felt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (mr *MockAccountInterfaceMockRecorder) HashDeployAccount(tx, contract any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashDeployAccount", reflect.TypeOf((*MockAccountInterface)(nil).HashDeployAccount), tx, contract)
}

func (m *MockAccountInterface) HashInvoke(invokeTxn rpc.InvokeTxnType) (*felt.Felt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashInvoke", invokeTxn)
	ret0, _ := ret[0].(*felt.Felt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (mr *MockAccountInterfaceMockRecorder) HashInvoke(invokeTxn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashInvoke", reflect.TypeOf((*MockAccountInterface)(nil).HashInvoke), invokeTxn)
}

// WaitForTransactionReceipt mocks base method.
func (m *MockAccountInterface) WaitForTransactionReceipt(ctx context.Context, txHash *felt.Felt, pollInterval time.Duration) (*rpc.TransactionReceiptWithBlockInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForTransactionReceipt", ctx, txHash, pollInterval)
	ret0, _ := ret[0].(*rpc.TransactionReceiptWithBlockInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WaitForTransactionReceipt indicates an expected call of WaitForTransactionReceipt.
func (mr *MockAccountInterfaceMockRecorder) WaitForTransactionReceipt(ctx, txHash, pollInterval any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForTransactionReceipt", reflect.TypeOf((*MockAccountInterface)(nil).WaitForTransactionReceipt), ctx, txHash, pollInterval)
}
