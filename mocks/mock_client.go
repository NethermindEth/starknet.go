// Code generated by MockGen. DO NOT EDIT.
// Source: client.go
//
// Generated by this command:
//
//	mockgen -destination=../mocks/mock_client.go -package=mocks -mock_names=ClientI=MockClient -source=client.go ClientI
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of ClientI interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CallContext mocks base method.
func (m *MockClient) CallContext(ctx context.Context, result any, method string, args any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallContext", ctx, result, method, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallContext indicates an expected call of CallContext.
func (mr *MockClientMockRecorder) CallContext(ctx, result, method, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallContext", reflect.TypeOf((*MockClient)(nil).CallContext), ctx, result, method, args)
}

// CallContextWithSliceArgs mocks base method.
func (m *MockClient) CallContextWithSliceArgs(ctx context.Context, result any, method string, args ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, result, method}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CallContextWithSliceArgs", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallContextWithSliceArgs indicates an expected call of CallContextWithSliceArgs.
func (mr *MockClientMockRecorder) CallContextWithSliceArgs(ctx, result, method any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, result, method}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallContextWithSliceArgs", reflect.TypeOf((*MockClient)(nil).CallContextWithSliceArgs), varargs...)
}

// Close mocks base method.
func (m *MockClient) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClient)(nil).Close))
}
